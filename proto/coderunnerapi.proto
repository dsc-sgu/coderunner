syntax = "proto3";
import "google/protobuf/timestamp.proto";
package coderunnerapi;

service TestingService {
  rpc SubmitCode(SubmitCodeRequest) returns (stream Task) {}
}

message Empty {}

message SubmitCodeRequest {
  string code = 1;
  Language language = 2;
  CompilationLimits compilation_limits = 3;
  ExecutionLimits execution_limits = 4;
  repeated TestData test_data = 5;
}

message CompilationLimits {
  optional uint64 memory_bytes = 1;
  optional uint64 time_ms = 2;
}

message ExecutionLimits {
  optional uint64 memory_bytes = 1;
  optional uint64 time_ms = 2;
  optional uint32 pids_count = 3;
  optional uint64 stdout_size_bytes = 4;
  optional uint64 stderr_size_bytes = 5;
}

message TestData {
  string stdin = 1;
  string stdout = 2;
  string stderr = 3;
  int32 status = 4;
}

message Task {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  google.protobuf.Timestamp updated_at = 3;
  Language language = 4;

  oneof state {
    Empty accepted = 5;

    Empty compiling = 6;
    CompilationFailed compilation_failed = 7;
    CompilationLimitsExceeded limits_exceeded = 8;
    Empty compiled = 9;

    TestsExecuting executing = 10;
    TestsDone done = 11;
  }
}

enum Language {
  GNU_CPP = 0;
}

message InvalidRequest { string message = 1; }

message CompilationFailed { string message = 1; }

message CompilationLimitsExceeded {
  LimitType type = 1;

  enum LimitType {
    RAM = 0;
    TIME = 1;
  }
}

message TestsExecuting { repeated Test tests = 1; }

message TestsDone { repeated TestResult tests = 1; }

message TestResult { Test state = 1; }

message Test {
  oneof state {
    Empty pending = 1;
    Empty executing = 2;
    TestCorrect correct = 3;
    TestWrong wrong = 4;
    TestLimitsExceeded limits_exceeded = 5;
    Empty internal_error = 6;
  }

  string stdout = 7;
  string stderr = 8;
}

message TestChecking { TestResources resources = 1; }

message TestCorrect {
  TestResources resources = 1;
  int32 status = 2;
}

message TestLimitsExceeded {
  LimitType type = 1;
  TestResources resources = 2;

  enum LimitType {
    RAM = 0;
    TIME = 1;
    PIDS = 2;
    STDOUT_SIZE = 3;
    STDERR_SIZE = 4;
  }
}

message TestWrong {
  string expected_stdout = 1;
  string expected_stderr = 2;
  int32 expected_status = 3;
  int32 actual_status = 5;
  TestResources resources = 4;
}

message TestCrash { TestResources resources = 1; }

message TestResources {
  int64 execution_time_ms = 2;
  int64 peak_memory_usage_bytes = 3;
}
